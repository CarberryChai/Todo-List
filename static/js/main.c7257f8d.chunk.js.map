{"version":3,"sources":["features/todosSlice.ts","features/todoShowSlice.ts","components/TodoHeader/Header.tsx","components/TodoList/TodoList.tsx","components/TodoFooter/Footer.tsx","App.tsx","rootReducer.ts","store.ts","index.tsx"],"names":["initialState","JSON","parse","window","localStorage","getItem","updateLocalStorage","state","setItem","stringify","todoslice","createSlice","name","reducers","addTodo","action","push","payload","editTodo","todo","find","item","id","text","toggleTodo","done","deleteTodo","idx","findIndex","splice","completeAll","clearCompleted","actives","filter","actions","pathshowSlice","updateShow","Header","React","useState","setText","dispatch","useDispatch","className","onSubmit","e","preventDefault","uuidv4","type","value","placeholder","onChange","target","trim","autoFocus","TodoList","todos","useSelector","todoShow","isEditing","setEditing","isCompletedAll","useMemo","every","i","todoList","editingHandler","key","length","checked","toggleAllHandler","htmlFor","map","toggleHandler","onDoubleClick","onClick","editHandler","onBlur","onKeyUp","TodoFooter","left","r","href","App","Footer","rootReducer","combineReducers","store","configureStore","reducer","root","document","getElementById","classList","add","require","default","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c7257f8d.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nexport interface Todo {\n  id: string\n  text: string\n  done: boolean\n}\nexport type Todos = ReadonlyArray<Todo>\nconst initialState: Todos = JSON.parse(\n  window.localStorage.getItem('todo-list') ?? '[]'\n)\nconst updateLocalStorage = (state: Todos) =>\n  window.localStorage.setItem('todo-list', JSON.stringify(state))\nconst todoslice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    addTodo(state, action: PayloadAction<Todo>) {\n      state.push(action.payload)\n      updateLocalStorage(state)\n    },\n    editTodo(state, action: PayloadAction<Todo>) {\n      const todo = state.find(item => item.id === action.payload.id)\n      if (todo) {\n        todo.text = action.payload.text\n        updateLocalStorage(state)\n      }\n    },\n    toggleTodo(state, action: PayloadAction<string>) {\n      const todo = state.find(item => item.id === action.payload)\n      if (todo) {\n        todo.done = !todo.done\n        updateLocalStorage(state)\n      }\n    },\n    deleteTodo(state, action: PayloadAction<string>) {\n      const idx = state.findIndex(item => item.id === action.payload)\n      if (idx >= 0) {\n        state.splice(idx, 1)\n        updateLocalStorage(state)\n      }\n    },\n    completeAll(state, action: PayloadAction<boolean>) {\n      for (const item of state) {\n        item.done = action.payload\n      }\n      updateLocalStorage(state)\n    },\n    clearCompleted(state) {\n      const actives = state.filter(item => !item.done) as Todos\n      updateLocalStorage(actives)\n      return actives\n    },\n  },\n})\nexport const {\n  addTodo,\n  toggleTodo,\n  completeAll,\n  editTodo,\n  deleteTodo,\n  clearCompleted,\n} = todoslice.actions\nexport default todoslice.reducer\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nexport type TodoShow = 'All' | 'Completed' | 'Active'\n\nconst pathshowSlice = createSlice({\n  name: 'todoShow',\n  initialState: 'All' as TodoShow,\n  reducers: {\n    updateShow(state, action: PayloadAction<TodoShow>) {\n      // 真坑！如果payload是原始值直接返回\n      return action.payload\n    },\n  },\n})\n\nexport const { updateShow } = pathshowSlice.actions\n\nexport default pathshowSlice.reducer\n","import React from 'react'\nimport './header.scss'\nimport { addTodo, Todo } from '../../features/todosSlice'\nimport { useDispatch } from 'react-redux'\nimport { v4 as uuidv4 } from 'uuid'\nconst Header = (): JSX.Element => {\n  const [text, setText] = React.useState('')\n  const dispatch = useDispatch()\n  const changeHandler = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const { value } = e.target\n    setText(value.trim())\n  }\n  const submitHandler = (e: React.FormEvent<HTMLFormElement>): void => {\n    e.preventDefault()\n    const todo: Todo = {\n      id: uuidv4(),\n      text,\n      done: false,\n    }\n    dispatch(addTodo(todo))\n    setText('')\n  }\n  return (\n    <form className='header' onSubmit={submitHandler}>\n      <h1>todos</h1>\n      <input\n        type='text'\n        value={text}\n        className='new-todo'\n        placeholder='What needs to be done?'\n        onChange={changeHandler}\n        autoFocus\n      />\n      <button type='submit' className='hidden'></button>\n    </form>\n  )\n}\n\nexport default Header\n","import React, { useState, useMemo } from 'react'\nimport './todo-list.scss'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { rootState } from '../../rootReducer'\nimport {\n  Todos,\n  toggleTodo,\n  editTodo,\n  Todo,\n  deleteTodo,\n  completeAll,\n} from '../../features/todosSlice'\nimport { TodoShow } from '../../features/todoShowSlice'\nconst TodoList = (): JSX.Element | null => {\n  const todos = useSelector<rootState, Todos>(state => state.todos)\n  const todoShow = useSelector<rootState, TodoShow>(state => state.todoShow)\n  const dispatch = useDispatch()\n  const [isEditing, setEditing] = useState(false)\n  const isCompletedAll = useMemo(() => todos.every(i => i.done), [todos])\n  const todoList = useMemo(() => {\n    switch (todoShow) {\n      case 'All':\n        return todos\n      case 'Active':\n        return todos.filter(item => !item.done)\n      case 'Completed':\n        return todos.filter(item => item.done)\n    }\n  }, [todoShow, todos])\n  const toggleHandler = (\n    id: string,\n    e: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    if (e.target.type === 'checkbox') {\n      dispatch(toggleTodo(id))\n    }\n  }\n  const editHandler = (\n    todo: Todo,\n    e: React.ChangeEvent<HTMLInputElement>\n  ): void => {\n    dispatch(editTodo({ ...todo, text: e.target.value }))\n  }\n  const editingHandler = (\n    e:\n      | React.KeyboardEvent<HTMLInputElement>\n      | React.FocusEvent<HTMLInputElement>\n  ) => {\n    if (e.type === 'blur' || ('key' in e && e.key === 'Enter')) {\n      setEditing(false)\n    }\n  }\n  const deleteItem = (id: string) => {\n    dispatch(deleteTodo(id))\n  }\n  const toggleAllHandler = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    dispatch(completeAll(e.target.checked))\n  }\n  if (todoList.length === 0) {\n    return null\n  }\n  return (\n    <div className='main'>\n      <input\n        id='toggle-all'\n        className='toggle-all'\n        type='checkbox'\n        checked={isCompletedAll}\n        onChange={e => toggleAllHandler(e)}\n      />\n      <label htmlFor='toggle-all'>Mark all as complete</label>\n      <ul className='todo-list'>\n        {todoList.map(item => (\n          <li\n            className={`${item.done ? 'completed' : ''} ${\n              isEditing ? 'editing' : ''\n            }`}\n            key={item.id}\n          >\n            <div className='view'>\n              <input\n                className='toggle'\n                type='checkbox'\n                checked={item.done}\n                onChange={e => toggleHandler(item.id, e)}\n              />\n              <label onDoubleClick={() => setEditing(true)}>{item.text}</label>\n              <button\n                className='destroy'\n                onClick={() => deleteItem(item.id)}\n              ></button>\n            </div>\n            <input\n              className='edit'\n              value={item.text}\n              onChange={e => editHandler(item, e)}\n              onBlur={e => editingHandler(e)}\n              onKeyUp={e => editingHandler(e)}\n            />\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default TodoList\n","import React, { useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { TodoShow, updateShow } from '../../features/todoShowSlice'\nimport { rootState } from '../../rootReducer'\nimport { Todos, clearCompleted } from '../../features/todosSlice'\nimport './todo-footer.scss'\n\nconst TodoFooter = (): JSX.Element | null => {\n  const todos = useSelector<rootState, Todos>(state => state.todos)\n  const todoShow = useSelector<rootState, TodoShow>(state => state.todoShow)\n  const left = useMemo(() => {\n    return todos.filter(item => !item.done).length\n  }, [todos])\n  const shows: TodoShow[] = ['All', 'Active', 'Completed']\n  const dispatch = useDispatch()\n  if (todos.length === 0) {\n    return null\n  }\n  return (\n    <footer className='footer'>\n      <span className='todo-count'>\n        <strong>{left}</strong>\n      </span>\n      <ul className='filters'>\n        {shows.map(r => (\n          <li key={r} onClick={() => dispatch(updateShow(r))}>\n            <a className={`${todoShow === r ? 'selected' : ''}`} href={`#${r}`}>\n              {r}\n            </a>\n          </li>\n        ))}\n      </ul>\n      <button\n        className='clear-completed'\n        onClick={() => dispatch(clearCompleted())}\n      >\n        Clear completed\n      </button>\n    </footer>\n  )\n}\n\nexport default TodoFooter\n","import React from 'react'\nimport './App.css'\nimport Header from './components/TodoHeader/Header'\nimport TodoList from './components/TodoList/TodoList'\nimport Footer from './components/TodoFooter/Footer'\n\nfunction App(): JSX.Element {\n  return (\n    <>\n      <Header></Header>\n      <TodoList></TodoList>\n      <Footer></Footer>\n    </>\n  )\n}\n\nexport default App\n","import { combineReducers } from '@reduxjs/toolkit'\nimport todos from './features/todosSlice'\nimport todoShow from './features/todoShowSlice'\nconst rootReducer = combineReducers({ todos, todoShow })\n\nexport type rootState = ReturnType<typeof rootReducer>\nexport default rootReducer\n","import { configureStore } from '@reduxjs/toolkit'\n\nimport rootReducer from './rootReducer'\n\nconst store = configureStore({\n  reducer: rootReducer,\n})\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./rootReducer', () => {\n    const newRootReducer = require('./rootReducer').default\n    store.replaceReducer(newRootReducer)\n  })\n}\n\nexport type AppDispatch = typeof store.dispatch\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.scss'\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nconst root = document.getElementById('root')\nroot?.classList.add('todoapp')\n\nconst render = () => {\n  const App = require('./App').default\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>,\n    root\n  )\n}\n\nrender()\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./App', render)\n}\n"],"sourceRoot":""}